//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst_printRA<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  SymbolTable2 tab;
  int registerCnt;
  Integer callerSavedCount;
  Integer calleeSavedCount;
  TreeMap<Integer,Integer> curAllocMap;
  String[] registers;
  Integer curLocalOffset;
  Integer curTotStckSlots;
  Vector<Integer> collectArgs;
  public GJDepthFirst_printRA(SymbolTable2 tb,int regCount,int calleeSavedCnt)
  {
    super();
    tab = tb;
    registerCnt = regCount; 
    calleeSavedCount = calleeSavedCnt;
    callerSavedCount = regCount - calleeSavedCnt;
    registers = new String[] {"t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","s0","s1","s2","s3","s4","s5","s6","s7"};
    curLocalOffset = 0;
    curTotStckSlots = 0;
    collectArgs = new Vector<Integer>();
  }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      String main = (String) n.f0.accept(this, argu);
      Vector<Integer> tmp = tab.proc3ints.get(main);
      System.out.println("MAIN [" + tmp.get(0) + "] [" + tmp.get(1) + "] [" + tmp.get(2) + "]" );
      curLocalOffset = 0;
      curTotStckSlots = tmp.get(1);
      curAllocMap = tab.getMap(main);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      Boolean f = tab.spillInfo.get(main);
      if(f)
      System.out.println("//SPILLED");
      else
      System.out.println("//NOTSPILLED");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      String fromStmtLst = "fromStmtLst";
      n.f0.accept(this, (A) fromStmtLst);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String fromProc = "fromProc";
      String lab = (String) n.f0.accept(this, (A) fromProc);
      Vector<Integer> tmp = tab.proc3ints.get(lab);
      System.out.println(lab + " [" + tmp.get(0) + "] [" + tmp.get(1) + "] [" + tmp.get(2) + "]" );
      curLocalOffset = Math.max(tmp.get(0)-4,0) + calleeSavedCount;
      curTotStckSlots = tmp.get(1);
      n.f1.accept(this, argu);
      String num = (String) n.f2.accept(this, argu);
      int numb = Integer.valueOf(num);
      n.f3.accept(this, argu);
      curAllocMap = tab.getMap(lab);
      int argsOffset = Math.max(numb,4)-4;
      for(int i = 0;i < calleeSavedCount;i++)
      {

        System.out.println("ASTORE SPILLEDARG " + (argsOffset + i) + " s" + i);
      }
      for(int i = 0;i < Math.min(numb,4);i++)
      {
        Integer r = curAllocMap.get(i);
        if(r != null)
        {
          if(r < registerCnt)
          {
            System.out.println("MOVE " + registers[r] + " a" + i);
          }
          else
          {
            int slot = curLocalOffset + r - registerCnt;
            System.out.println("ASTORE SPILLEDARG " + slot + " a" + i);
          }
        }
      }
      for(int i = Math.min(numb,4);i < numb;i++)
      {
        Integer r= curAllocMap.get(i);
        if(r!=null)
        {
          System.out.println("ALOAD v0 SPILLEDARG " + (i-4));
          if(r < registerCnt)
          {
            System.out.println("MOVE " + registers[r] + " v0");
          }
          else
          {
            int slot = curLocalOffset + r - registerCnt;
            System.out.println("ASTORE SPILLEDARG " + slot + " v0");
          }
        }
      }
      n.f4.accept(this, argu);
      for(int i = 0;i < calleeSavedCount;i++)
      {

        System.out.println("ALOAD" + " s" + i + " SPILLEDARG " + (argsOffset + i));
      }
      System.out.println("END");
      Boolean f = tab.spillInfo.get(lab);
      if(f)
      System.out.println("//SPILLED");
      else System.out.println("//NOTSPILLED");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)null);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num = (String) n.f1.accept(this, argu);
      int numb = Integer.valueOf(num);
      String lab = (String) n.f2.accept(this, argu);
      int r = curAllocMap.get(numb);
      if(r < registerCnt)
      System.out.println("CJUMP " + registers[r] + " " + lab);
      else
      {
        int slot = curLocalOffset + r - registerCnt;
        System.out.println("ALOAD v0 SPILLEDARG "+ slot);
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lab = (String) n.f1.accept(this, argu);
      System.out.println("JUMP " + lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num1 = (String) n.f1.accept(this, argu);
      String num2 = (String) n.f2.accept(this, argu);
      String num3 = (String) n.f3.accept(this, argu);
      Integer n1 = Integer.valueOf(num1);
      Integer n2 = Integer.valueOf(num2);
      Integer n3 = Integer.valueOf(num3);
      int r1 = curAllocMap.get(n1);
      int r3 = curAllocMap.get(n3);
      Boolean f1 = false,f3 = false;
      if(r1 >= registerCnt)
      {
        int slot = curLocalOffset + r1 - registerCnt;
        System.out.println("ALOAD v0 SPILLEDARG " + slot);
        f1 = true;
      }
      if(r3 >= registerCnt)
      {
        int slot = curLocalOffset + r3 - registerCnt;
        System.out.println("ALOAD v1 SPILLEDARG " + slot);
        f3 = true;
      }
      if(f1 && f3)
      {
        System.out.println("HSTORE v0 " + n2 + " v1");
      }
      else if(f1)
      {
        System.out.println("HSTORE v0 " + n2 + " " + registers[r3]);
      }
      else if(f3)
      {
        System.out.println("HSTORE " + registers[r1] + " " + n2  + " v1");
      }
      else
      {
        System.out.println("HSTORE " + registers[r1] + " " + n2 + " " + registers[r3]);
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num1 = (String) n.f1.accept(this, argu);
      String num2 = (String) n.f2.accept(this, argu);
      String num3 = (String) n.f3.accept(this, argu);
      Integer n1 = Integer.valueOf(num1);
      Integer n2 = Integer.valueOf(num2);
      Integer n3 = Integer.valueOf(num3);
      int r1 = curAllocMap.get(n1);
      int r2 = curAllocMap.get(n2);
      Boolean f1 = false,f2 = false;
      if(r1 >= registerCnt)
      {
        int slot = curLocalOffset + r1 - registerCnt;
        System.out.println("ALOAD v0 SPILLEDARG " + slot);
        f1 = true;
      }
      if(r2 >= registerCnt)
      {
        int slot = curLocalOffset + r2 - registerCnt;
        System.out.println("ALOAD v1 SPILLEDARG " + slot);
        f2 = true;
      }
      if(f1 && f2)
      {
        System.out.println("HLOAD v0 " + "v1 " + n3);
      }
      else if(f1)
      {
        System.out.println("HLOAD v0 " + registers[r2] + " " + n3);
      }
      else if(f2)
      {
        System.out.println("HLOAD " + registers[r1] + " " + "v1 "  + n3);
      }
      else
      {
        System.out.println("HLOAD " + registers[r1] + " " + registers[r2] + " " + n3);
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num = (String) n.f1.accept(this, argu);
      Integer numb = Integer.valueOf(num);
      Integer r = curAllocMap.get(numb);
      String reg;
      Boolean f = false;
      if(r < registerCnt)
      {
        reg = registers[r];
      }
      else
      {
        reg = "v0";
        f = true;
      }
      n.f2.accept(this, (A) reg);
      if(f)
      {
        int slot = curLocalOffset + r - registerCnt;
        System.out.println("ASTORE SPILLEDARG " + slot + " v0");
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t = (String)n.f1.accept(this, argu);
      if(n.f1.f0.which == 0)
      {
        Integer r = curAllocMap.get(Integer.valueOf(t));
        if(r < registerCnt)
        {
          System.out.println("PRINT " + registers[r]);
        }
        else
        {
          int slot = curLocalOffset + r - registerCnt;
          System.out.println("ALOAD v1 SPILLEDARG " + slot);
          System.out.println("PRINT v1");
        }
      }
      else
      {
        System.out.println("PRINT " + t);
      }
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String fromExp = "fromExp";
      String res= (String) n.f0.accept(this, (A) fromExp);
      String arg = (String) argu;
      if(n.f0.which==0)
      {
        if(!arg.equals("v0"))
        {
          System.out.println("MOVE " + arg + " v0");
        }
      }
      else
      {
        if(!arg.equals(res))
        System.out.println("MOVE " + arg + " " + res);
      }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String t = (String) n.f3.accept(this, argu);
      if(n.f3.f0.which == 0)
      {
        Integer r = curAllocMap.get(Integer.valueOf(t));
        if(r < registerCnt)
        {
          System.out.println("MOVE v0 " + registers[r]);
        }
        else
        {
          int slot = curLocalOffset + r - registerCnt;
          System.out.println("ALOAD v1 SPILLEDARG " + slot);
          System.out.println("MOVE v0 v1");
        }
      }
      else
      {
        System.out.println("MOVE v0 " + t);
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      argu = null;
      for(int i = 0;i < callerSavedCount;i++)
      {
        System.out.println("ASTORE SPILLEDARG " + (curTotStckSlots - (i+1)) + " t" + i);
      }
      n.f0.accept(this, argu);
      String t = (String) n.f1.accept(this, argu);
      collectArgs.clear();
      String fromCall = "fromCall";
      n.f2.accept(this, argu);
      n.f3.accept(this, (A) fromCall);
      n.f4.accept(this, argu);
      int sz= collectArgs.size();
      for(int i = 0;i < Math.min(sz,4);i++)
      {
        Integer r = curAllocMap.get(collectArgs.get(i));
        if(r < registerCnt)
        {
          System.out.println("MOVE a" + i + " " + registers[r]);
        }
        else
        {
          int slot = curLocalOffset + r - registerCnt;
          System.out.println("ALOAD a" + i  + " SPILLEDARG " + slot);
        }
      }
      for(int i = Math.min(sz,4);i < sz;i++)
      {
        Integer r = curAllocMap.get(collectArgs.get(i));
        if(r < registerCnt)
        {
          int st = i - 4 + 1;
          System.out.println("PASSARG " + st + " " + registers[r]);
        }
        else
        {
          int slot = curLocalOffset + r - registerCnt;
          System.out.println("ALOAD v1 SPILLEDARG " + slot);
          int st = i - 4 + 1;
          System.out.println("PASSARG " + st + " v1");
        }
      }
      if(n.f1.f0.which == 0)
      {
        Integer r = curAllocMap.get(Integer.valueOf(t));
        if(r < registerCnt)
        {
          System.out.println("CALL " + registers[r]);
        }
        else
        {
          int slot = curLocalOffset + r - registerCnt;
          System.out.println("ALOAD v1 SPILLEDARG " + slot);
          System.out.println("CALL v1");
        }
      }
      else
      {
        System.out.println("CALL " + t);
      }
      for(int i = 0;i < callerSavedCount;i++)
      {
        System.out.println("ALOAD" + " t" + i + " SPILLEDARG " + (curTotStckSlots - (i+1)) );
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      argu = null;
      n.f0.accept(this, argu);
      String t = (String) n.f1.accept(this, argu);
      String res;
      if(n.f1.f0.which == 0)
      {
        Integer r = curAllocMap.get(Integer.valueOf(t));
        if(r < registerCnt)
        {
          res = "HALLOCATE " + registers[r];
        }
        else
        {
          int slot = curLocalOffset + r - registerCnt;
          System.out.println("ALOAD v1 SPILLEDARG " + slot);
          res = "HALLOCATE v1";
        }
      }
      else
      {
        res = "HALLOCATE " + t;
      }
      return (R) res;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      argu = null;
      String op = (String) n.f0.accept(this, argu);
      String tmp = (String) n.f1.accept(this, argu);
      String t = (String) n.f2.accept(this, argu);
      Integer r = curAllocMap.get(Integer.valueOf(tmp));
      String res;
      if(r < registerCnt)
      {
        if(n.f2.f0.which == 0)
        {
          Integer r2 = curAllocMap.get(Integer.valueOf(t));
          if(r2 < registerCnt)
          {
            res = op + " " + registers[r] + " " + registers[r2];
            //System.out.println("MOVE v0 " + op + " " + registers[r] + " " + registers[r2]);
          }
          else
          {
            int slot = curLocalOffset + r2 - registerCnt;
            System.out.println("ALOAD v1 SPILLEDARG " + slot);
            res = op + " " + registers[r] + " " + "v1";
            //System.out.println("MOVE v0 " + op + " " + registers[r] + " " + "v1");
          }
        }
        else
        {
            res = op + " " + registers[r] + " " + t;
            //System.out.println("MOVE v0 " + op + " " + registers[r] + " " + t);
        }        
      }
      else
      {
        int slot = curLocalOffset + r - registerCnt;
        System.out.println("ALOAD v0 SPILLEDARG " + slot);
        if(n.f2.f0.which == 0)
        {
          Integer r2 = curAllocMap.get(Integer.valueOf(t));
          if(r2 < registerCnt)
          {
            res = op + " " + "v0" + " " + registers[r2];
            //System.out.println("MOVE v0 " + op + " " + "v0" + " " + registers[r2]);
          }
          else
          {
            int slot2 = curLocalOffset + r2 - registerCnt;
            System.out.println("ALOAD v1 SPILLEDARG " + slot2);
            res = op + " " + "v0" + " " + "v1";
            //System.out.println("MOVE v0 " + op + " " + "v0" + " " + "v1");
          }
        }
        else
        {
          res = op + " " + "v0" + " " + t;
          //System.out.println("MOVE v0 " + op + " " + "v0" + " " + t);
        }
      }
      return (R) res;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
     String op = (String) n.f0.accept(this, argu);
      return (R) op;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String t = (String) n.f0.accept(this, argu);
      String res = null;
      if(argu != null && ((String)argu).equals("fromExp"))
      {
        if(n.f0.which == 0)
        {
          Integer r = curAllocMap.get(Integer.valueOf(t));
          if(r < registerCnt)
          {
            res = registers[r];
            //System.out.println("MOVE v0 " + registers[r]);
          }
          else
          {
            int slot = curLocalOffset + r - registerCnt;
            System.out.println("ALOAD v1 SPILLEDARG " + slot);
            res = "v1";
            //System.out.println("MOVE v0 v1");
          }
        }
        else
        {
          res = t;
          //System.out.println("MOVE v0 " + t);
        }
        return (R) res;
      }
      return (R) t;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A) null);
      String num = (String) n.f1.accept(this, (A) null);
      String arg = (String) argu;
      if(arg != null && arg.equals("fromCall"))
      {
        collectArgs.addElement(Integer.valueOf(num));
      }
      return (R) num;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String num = (String) n.f0.accept(this, argu);
      return (R) num;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String lab = (String) n.f0.accept(this, argu);
      String arg = (String) argu;
      if(arg != null && arg.equals("fromStmtLst"))
      {
        System.out.println(lab);
      }
      return (R) lab;
   }

}

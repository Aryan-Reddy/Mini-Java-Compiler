//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst_typeCheck<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  private SymbolTable tab;
  private Env curEnv;
  private String curClass;
  private Stack<String> collectArgTypes;
  int msgSndCnt;
  Boolean canSubstitute(String tp1,String tp2)
  {
      if(tp1 == null || tp2 == null)
      {
        return false;
      }
      if(tp2.equals("int[]") || tp2.equals("int") || tp2.equals("Boolean") || tp1.equals("int[]") || tp1.equals("int") || tp1.equals("Boolean"))
      {
        if(!tp2.equals(tp1))
        {
          return false;
        }
        return true;
      }
      Env e1 = tab.getClassEnv(tp1);
      Env e2 = tab.getClassEnv(tp2);
      if(e1 == null || e2 == null)
      {
        return false;
      }
      if(!e2.isSubType(e1))
      {
          return false;
      }
      return true;
  }
  public GJDepthFirst_typeCheck(SymbolTable tb)
  {
    super();
    tab = tb;
    curEnv = null;
    curClass = null;
    collectArgTypes = new Stack<String> ();
    msgSndCnt = 0;
  }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      Env nw = tab.getClassEnv(id);
      if(nw == null) 
      {
        new PrintErr();
      }
      curEnv = nw;
      curClass = id;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      Env nw = tab.getClassEnv(id);
      if(nw == null) 
      {
        new PrintErr();
      }
      curEnv = nw;
      curClass = id;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      Env nw = tab.getClassEnv(id);
      if(nw == null) 
      {
        new PrintErr();
      }
      curEnv = nw;
      curClass = id;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String accT = (String) n.f0.accept(this, argu);
      int acT = -1;
      if(accT == null) new PrintErr();
      if(accT.equals("public"))
      {
        acT = 0;
      }
      else if(accT.equals("private"))
      {
        acT = 2;
      }
      else if(accT.equals("protected"))
      {
        acT = 1;
      }
      else
      {
        new PrintErr();
      }
      n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      List<Object> l = curEnv.getMethodArgAccType(id);
      Env nw = curEnv.getMethodEnv(id);
      if(nw == null) 
      {
        new PrintErr();
      }
      String[] args = (String[]) l.get(0);
      Env par = curEnv.getParent();
      if(par != null)
      {
        List<Object> l2= par.getMethodArgAccType(id);
        if(l2 != null)
        {
          String[] args2 = (String[]) l2.get(0);
          int acT2 = (int) l2.get(1);
          if (args2.length != args.length) new PrintErr();
          int sz = args2.length;
          for(int i = 0;i < sz;i++)
          {
            if(!args[i].equals(args2[i])) new PrintErr();
          }
          if(acT != acT2)
          {
            new PrintErr();
          }
        }
      }
      Env prevEnv = curEnv;
      curEnv = nw;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String returnType = (String) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      if(!canSubstitute(args[0],returnType))
      {
        new PrintErr();
      }
      curEnv = prevEnv;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      String accT = (String) n.f0.accept(this, argu);
      return (R) accT;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String pb = "public";
      return (R) pb;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String pv = "private";
      return (R) pv;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String pr = "protected";
      return (R) pr;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(id1 == null)
      {
        new PrintErr();
      }
      String tp1 = curEnv.getIDType(id1);
      String tp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!canSubstitute(tp1,tp2)) 
      {
        new PrintErr();
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      String tp = curEnv.getIDType(id);
      if(tp == null || (!tp.equals("int[]")))
      {
        new PrintErr();
      }
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String tp3 = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!tp2.equals("int") || !tp3.equals("int"))
      {
        new PrintErr();
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!tp.equals("Boolean"))
      {
        new PrintErr();
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!tp.equals("Boolean"))
      {
        new PrintErr();
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!tp.equals("Boolean"))
      {
        new PrintErr();
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!(tp.equals("int") || tp.equals("Boolean")))
      {
        new PrintErr();
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String tp = (String) n.f0.accept(this, argu);
      return (R) tp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(!(tp1.equals("Boolean") && tp2.equals("Boolean")))
      {
        new PrintErr();
      }
      String b = "Boolean";
      return (R) b;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(!(tp1.equals("Boolean") && tp2.equals("Boolean")))
      {
        new PrintErr();
      }
      return (R) "Boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(!(tp1.equals("int") && tp2.equals("int")))
      {
        new PrintErr();
      }
      return (R) "Boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(tp1 == null || tp2 == null)
      {
        new PrintErr();
      }
      if(canSubstitute(tp1,tp2) || canSubstitute(tp2,tp1))
      {
        return (R) "Boolean";
      }
      new PrintErr();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(!(tp1.equals("int") && tp2.equals("int")))
      {
        new PrintErr();
      }
      return (R) tp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(!(tp1.equals("int") && tp2.equals("int")))
      {
        new PrintErr();
      }
      return (R) tp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(!(tp1.equals("int") && tp2.equals("int")))
      {
        new PrintErr();
      }
      return (R) tp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      if(!(tp1.equals("int") && tp2.equals("int")))
      {
        new PrintErr();
      }
      return (R) tp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!(tp1.equals("int[]") && tp2.equals("int")))
      {
        new PrintErr();
      }
      String resTp = "int";
      return (R) resTp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String tp = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(!tp.equals("int[]"))
      {
        new PrintErr();
      }
      String resTp = "int";
      return (R) resTp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String x = "";
      int svCnt = msgSndCnt;
      msgSndCnt++;
      String ctp = (String) n.f0.accept(this, argu);
      if(ctp == null || ctp.equals("int") || ctp.equals("int[]") || ctp.equals("Boolean"))
      {
        new PrintErr();
      }
      Env e = tab.getClassEnv(ctp);
      if(e == null)
      {
        new PrintErr();
      }
      n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      ArrayList<Object>  l = e.getMethodArgAccType(id);
      if(l == null)
      {
        new PrintErr();
      }
      String[] argTypes = (String[]) l.get(0);  //return type is present at 0
      int acT = (int) l.get(1);
      if(acT == 2)
      {
        if(!e.checkMthdImmediate(id))
        {
          new PrintErr();
        }
      }
      collectArgTypes.clear();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      int sz = argTypes.length;
      if(sz-1 != collectArgTypes.size())
      {
        new PrintErr();
      }
      for(int i = 1;i < sz;i++)
      {
        if(!canSubstitute(argTypes[i],collectArgTypes.get(i-1)))
        {
          new PrintErr();
        }
      }
      Env clsE = tab.getClassEnv(curClass);
      if(acT == 2)
      {
        if(e != clsE)
        {
          new PrintErr();
        }
      }
     //System.out.println("Reached");
      if(acT == 1)
      {
        //System.out.println(curClass + " " + id);
        if(!clsE.isSubType(e))
        {
          new PrintErr();
        }
      }
      String cPres = e.getFunClassName(id);
      int ctpInt = tab.classIndex.get(cPres);
      String msgSndVal = Integer.toString(ctpInt);
      msgSndVal += "_";
      msgSndVal += id;
      tab.msgSendLabel.put(svCnt,msgSndVal);
      return (R) argTypes[0];
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String tp1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String tp3 = (String) n.f4.accept(this, argu);
      if(tp1 == null || tp2 == null || tp3 == null || !tp1.equals("Boolean"))
      {
        new PrintErr();
      }
      if(tp2.equals("int[]") || tp2.equals("int") || tp2.equals("Boolean") || tp3.equals("int[]") || tp3.equals("int") || tp3.equals("Boolean"))
      {
        if(tp2.equals(tp3))
        {
          return (R) tp2;
        }
        return _ret;
      }
      Env e2 = tab.getClassEnv(tp2);
      Env e3 = tab.getClassEnv(tp3);
      if(e2 == null || e3 == null)
      {
        new PrintErr();
      }
      Set<String> parofe2 = new TreeSet<String> ();
      while(e2 != null)
      {
        parofe2.add(e2.className);
        e2 = e2.parent;
      }
      Env e = null;
      while(e3 != null)
      {
        if(parofe2.contains(e3.className))
        {
          e = e3;
          break;
        }
        e3 = e3.parent;
      }
      if(e == null)
      {
        new PrintErr();
      }
      return (R) e.className;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String tp = (String) n.f0.accept(this, argu);
      if(tp == null) new PrintErr();
      collectArgTypes.push(tp);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tp = (String) n.f1.accept(this, argu);
      if(tp == null) new PrintErr();
      collectArgTypes.push(tp);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String x = "pExp";
      String r = (String) n.f0.accept(this, (A) x);
      if(r == null)
      {
        new PrintErr();
      }
      return (R) r;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tp = "int";
      return (R) tp;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tp = "Boolean";
      return (R) tp;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tp = "Boolean";
      return (R) tp;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, null);
      if(argu == null)
      {
        return (R) id;
      }
      String arg = (String) argu;
      if(arg == "pExp")
      {
        String tp = curEnv.getIDType(id);
        if(tp == null)
        {
          new PrintErr();
        }
        return (R) tp;
      }
      return null;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(curClass == null)
      {
        new PrintErr();
      }
      String tp = new String(curClass);
      return (R) tp;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String tp = (String) n.f3.accept(this, null);
      if(!tp.equals("int"))
      {
        new PrintErr();
      }
      n.f4.accept(this, argu);
      tp = new String("int[]");
      return (R) tp;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String id = (String) n.f1.accept(this, null);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R) id;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String tp = (String) n.f1.accept(this, null);
      if(!tp.equals("Boolean"))
      {
        new PrintErr();
      }
      return (R) tp;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String tp = (String) n.f1.accept(this, null);
      n.f2.accept(this, null);
      return (R) tp;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

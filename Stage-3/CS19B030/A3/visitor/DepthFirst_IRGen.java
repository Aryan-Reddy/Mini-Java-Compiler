//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirst_IRGen<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   private SymbolTable tab;
   private int tempCounter;
   private Env curEnv;
   private Env curEnvF;
   private boolean funcVarScan;
   private int paramCounter;
   private Hashtable<String,Integer> paramMap;
   private Stack<Stack<String>> paramTempNo;
   int msgSndcnt;
   int labelGen;
   public DepthFirst_IRGen(SymbolTable tb)
   {
    super();
    tab = tb;
    tempCounter = 1;
    curEnv = null;
    funcVarScan = false;
    paramCounter = 1;
    paramMap = new Hashtable<String,Integer> ();
    paramTempNo = new Stack<Stack<String>> ();
    msgSndcnt = 0;
    labelGen = 0;
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      Env nw = tab.getClassEnv(id);
      curEnv = nw;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      Env nw = tab.getClassEnv(id);
      curEnv = nw;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      Env nw = tab.getClassEnv(id);
      curEnv = nw;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(funcVarScan)
      {
        curEnv.idToTempNo.put(id,tempCounter);
        tempCounter++;
      }
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      paramCounter = 1;
      paramMap.clear();
      int cInd = tab.classIndex.get(curEnv.className);
      List<Object> l = curEnv.getMethodArgAccType(id);
      String[] args = (String[]) l.get(0);
      System.out.println("L" + Integer.toString(cInd) + "_" + id + " [" + args.length + "]");
      System.out.println("BEGIN");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      funcVarScan = true;
      n.f7.accept(this, argu);
      funcVarScan = false;
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String tmpNo = (String) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("RETURN TEMP " + tmpNo);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      paramMap.put(id,paramCounter);
      paramCounter++;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Integer i = curEnv.idToTempNo.get(id);
      if(i!=null)
      {
        System.out.println("MOVE TEMP " + i + " TEMP " + tmp);
        return (R) null;
      }
      i = paramMap.get(id); 
      if(i!= null)
      {
        System.out.println("MOVE TEMP " + i + " TEMP " + tmp);
        return (R) null;
      }
      String varcName = curEnv.getVarClassName(id);
      if(varcName == null)       assert (false) : "Never Reached";
      int varcInd = tab.classIndex.get(varcName);
      String cName = curEnv.className;
      int cInd = tab.classIndex.get(cName);
      String ofs = Integer.toString(varcInd) + "_" + id;
      Integer offset = tab.records[cInd].offsetValues.get(ofs);
      if(offset == null) assert (false) : "Never Reached";
      System.out.println("HSTORE TEMP 0 " + offset + " TEMP " + tmp);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String tmp2 = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      Integer i = curEnv.idToTempNo.get(id);
      String res;
      if(i!=null)
      {
        res = Integer.toString(i);
      }
      else
      {
        i = paramMap.get(id);
        if(i!= null)
        {
          res = Integer.toString(i);
        }
        else
        {
          String varcName = curEnv.getVarClassName(id);
          if(varcName == null)       assert (false) : "Never Reached";
          int varcInd = tab.classIndex.get(varcName);
          String cName = curEnv.className;
          int cInd = tab.classIndex.get(cName);
          String ofs = Integer.toString(varcInd) + "_" + id;
          Integer offset = tab.records[cInd].offsetValues.get(ofs);
          if(offset == null) assert (false) : "Never Reached";
          System.out.println("HLOAD TEMP " + tempCounter + " TEMP 0 " + offset);
          res = (String) Integer.toString(tempCounter);
          tempCounter++;
        }
      }
      System.out.println("MOVE TEMP " + tempCounter + " TIMES TEMP " + tmp1 + " 4");
      tempCounter++;
      System.out.println("MOVE TEMP " + tempCounter + " PLUS TEMP " + (tempCounter - 1) + " 4");
      tempCounter++;
      System.out.println("MOVE TEMP " + tempCounter + " PLUS TEMP " + res + " TEMP " + (tempCounter-1));
      tempCounter++;
      System.out.println("HSTORE TEMP " + (tempCounter - 1) + " 0 TEMP " + tmp2);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp = (String) n.f2.accept(this, argu);
      int tmpLabel = labelGen;
      labelGen++;
      n.f3.accept(this, argu);
      System.out.println("CJUMP TEMP " + tmp + " IFEND" + tmpLabel);
      n.f4.accept(this, argu);
      System.out.println("IFEND" + tmpLabel);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp = (String) n.f2.accept(this, argu);
      int elseLabel = labelGen;
      labelGen++;
      int endLabel = labelGen;
      labelGen++;
      n.f3.accept(this, argu);
      System.out.println("CJUMP TEMP " + tmp + " ELSESTART" + elseLabel);
      n.f4.accept(this, argu);
      System.out.println("JUMP IFEND" + endLabel);
      n.f5.accept(this, argu);
      System.out.println("ELSESTART"+ elseLabel);
      System.out.println("NOOP");
      n.f6.accept(this, argu);
      System.out.println("IFEND" + endLabel);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int whileEnd = labelGen;
      labelGen++;
      int whileBegin = labelGen;
      labelGen++;
      System.out.println("WHILEBEGIN" + whileBegin);
      System.out.println("NOOP");
      n.f1.accept(this, argu);
      String tmp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println("CJUMP TEMP " + tmp + " WHILEEND" + whileEnd);
      n.f4.accept(this, argu);
      System.out.println("JUMP WHILEBEGIN" + whileBegin);
      System.out.println("WHILEEND" + whileEnd);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("PRINT TEMP " + tmp);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String ret = (String) n.f0.accept(this, argu);
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " TIMES TEMP " + n1 + " TEMP "+n2);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " PLUS TEMP " + n1 + " TEMP " + n2);
      int z = tempCounter;
      tempCounter++;
      System.out.println("MOVE TEMP " + tempCounter + " 1");
      int y = tempCounter;
      tempCounter++;
      System.out.println("MOVE TEMP " + tempCounter + " LE TEMP " + y + " TEMP " + z);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " LE TEMP " + n1 + " TEMP " + n2);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " NE TEMP " + n1 + " TEMP " + n2);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " PLUS TEMP " + n1 + " TEMP " + n2);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " MINUS TEMP " + n1 + " TEMP " + n2);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " TIMES TEMP " + n1 + " TEMP " + n2);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + tempCounter + " DIV TEMP " + n1 + " TEMP " + n2);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String n2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String tmpP = Integer.toString(tempCounter);
      tempCounter++;
      String tmp = Integer.toString(tempCounter);
      tempCounter++;
      System.out.println("MOVE TEMP " + tmpP + " TIMES TEMP " + n2 + " 4");
      System.out.println("MOVE TEMP " + tmp + " PLUS TEMP " + tmpP + " 4");
      System.out.println("MOVE TEMP " + tempCounter + " PLUS TEMP " + n1 + " TEMP " + tmp);
      int z = tempCounter;
      tempCounter++;
      System.out.println("HLOAD TEMP " + tempCounter + " TEMP " + z + " 0");
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String n1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("HLOAD TEMP " + tempCounter + " TEMP " + n1 + " 0");
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String msLabel = tab.msgSendLabel.get(msgSndcnt);
      msgSndcnt++;
      String base = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      curEnvF = curEnv.getMethodEnv(id);
      n.f3.accept(this, argu);
      Stack<String> ssss = new Stack<String>();
      paramTempNo.push(ssss);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.println( "MOVE TEMP " + tempCounter + " L" + msLabel);
      tempCounter++;
      System.out.print( "MOVE TEMP " + tempCounter + " CALL TEMP " + (tempCounter-1) + " ( ");
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      System.out.print ("TEMP " + base + " ");
      for(int i = 0;i < ssss.size();i++)
      {
        System.out.print ("TEMP " + ssss.get(i) + " ");
      }
      System.out.println (" )");
      paramTempNo.pop();
      return (R) ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String b = (String) n.f0.accept(this, argu);
      String res = Integer.toString(tempCounter);
      tempCounter++;
      int label2 = labelGen;
      labelGen++;
      int endLabel = labelGen;
      labelGen++;
      n.f1.accept(this, argu);
      System.out.println("CJUMP TEMP " + b + " TERNSEC" + label2);
      String t1 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE TEMP " + res + " TEMP " + t1);
      System.out.println("JUMP TERNEND" + endLabel);
      n.f3.accept(this, argu);
      System.out.println("TERNSEC" + label2);
      System.out.println("NOOP");
      String t2 = (String) n.f4.accept(this, argu);
      System.out.println("MOVE TEMP " + res + " TEMP " + t2);
      System.out.println("TERNEND" + endLabel);
      System.out.println("NOOP");
      //assert (false) : "Not Implemented";
      return (R) res;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String e = (String) n.f0.accept(this, argu);
      if(!paramTempNo.empty())
      {
       Stack<String> tp = paramTempNo.peek();
       tp.push(e);
      }
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e = (String) n.f1.accept(this, argu);
      if(!paramTempNo.empty())
      {
       Stack<String> tp = paramTempNo.peek();
       tp.push(e);
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String arg = new String("pExp");
      String ret = (String) n.f0.accept(this, (A)arg);
      return (R) ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String num = (String) n.f0.accept(this, argu);
      String arg = (String) argu;
      if(arg.equals("pExp"))
      {
        System.out.println("MOVE TEMP " + tempCounter + " " + num);
        String ret = Integer.toString(tempCounter);
        tempCounter++;
        return (R) ret;
      }
      return _ret;
   }
   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String arg = (String) argu;
      if(arg.equals("pExp"))
      {
        System.out.println("MOVE TEMP " + tempCounter + " 1");
        String ret = Integer.toString(tempCounter);
        tempCounter++;
        return (R) ret;
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String arg = (String) argu;
      if(arg.equals("pExp"))
      {
        System.out.println("MOVE TEMP " + tempCounter + " 0");
        String ret = Integer.toString(tempCounter);
        tempCounter++;
        return (R) ret;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, null);
      if(argu == null)
      return (R) id;
      String arg = (String) argu;
      if(arg.equals("pExp"))
      {
        //check in idToTempNo
        Integer i = curEnv.idToTempNo.get(id);
        if(i!=null)
        {
          String res = Integer.toString(i);
          return (R) res;
        }
        i = paramMap.get(id);
        if(i!= null)
        {
          String res = Integer.toString(i);
          return (R) res;
        }
        String varcName = curEnv.getVarClassName(id);
        if(varcName == null)       assert (false) : "Never Reached";
        int varcInd = tab.classIndex.get(varcName);
        String cName = curEnv.className;
        int cInd = tab.classIndex.get(cName);
        String ofs = Integer.toString(varcInd) + "_" + id;
        Integer offset = tab.records[cInd].offsetValues.get(ofs);
        if(offset == null) assert (false) : "Never Reached";
        System.out.println("HLOAD TEMP " + tempCounter + " TEMP 0 " + offset);
        String ret = (String) Integer.toString(tempCounter);
        tempCounter++;
        return (R) ret;
      }

      assert (false) : "Never Reached";
      return (R) id;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)null);
      String arg = (String) argu;
      if(arg.equals("pExp"))
      {
        String ret = new String("0");
        return (R) ret;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      n.f2.accept(this, null);
      String tmpP = (String) n.f3.accept(this, null);
      n.f4.accept(this, null);
      System.out.println("MOVE TEMP " + tempCounter + " PLUS TEMP " + tmpP + " 1");
      tempCounter++;
      String tmp = Integer.toString(tempCounter - 1);
      System.out.println("MOVE TEMP " + tempCounter + " TIMES TEMP " + tmp + " 4");
      tempCounter++;
      System.out.println("MOVE TEMP " + tempCounter + " HALLOCATE TEMP " + (tempCounter-1));
      String ret = (String) Integer.toString(tempCounter);
      tempCounter++;
      System.out.println("HSTORE TEMP " + ret + " 0" + " TEMP " + tmpP);
      return (R)ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String id = (String) n.f1.accept(this, null);
      n.f2.accept(this, null);
      n.f3.accept(this, null);
      int cInd = tab.classIndex.get(id);
      Integer sizeBytes = tab.records[cInd].sizeBytes;
      System.out.println("MOVE TEMP " + tempCounter + " HALLOCATE " + (sizeBytes+4));
      String res = Integer.toString(tempCounter);
      tempCounter++;
      //assert (false) : "Not Implemented";
      return (R)res;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String tmpC = (String) n.f1.accept(this, null);
      System.out.println("MOVE TEMP " + tempCounter + " NE " + "TEMP " + tmpC + " " + 1);
      String ret = Integer.toString(tempCounter);
      tempCounter++;
      return (R) ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String ret = (String) n.f1.accept(this, null);
      n.f2.accept(this, null);
      String arg = (String) argu;
      if(arg.equals("pExp"))
      {
        return (R) ret;
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
